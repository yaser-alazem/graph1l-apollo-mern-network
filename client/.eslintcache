[{"/home/yaser-work/Documents/projects/social-network/client/src/reportWebVitals.js":"1","/home/yaser-work/Documents/projects/social-network/client/src/App.js":"2","/home/yaser-work/Documents/projects/social-network/client/src/ApolloProvider.js":"3","/home/yaser-work/Documents/projects/social-network/client/src/index.js":"4","/home/yaser-work/Documents/projects/social-network/client/src/pages/Home.js":"5","/home/yaser-work/Documents/projects/social-network/client/src/components/Navbar.js":"6","/home/yaser-work/Documents/projects/social-network/client/src/pages/Login.js":"7","/home/yaser-work/Documents/projects/social-network/client/src/pages/Register.js":"8","/home/yaser-work/Documents/projects/social-network/client/src/components/PostCard.js":"9","/home/yaser-work/Documents/projects/social-network/client/src/utils/hooks.js":"10","/home/yaser-work/Documents/projects/social-network/client/src/context/auth.js":"11","/home/yaser-work/Documents/projects/social-network/client/src/utils/AuthRoute.js":"12","/home/yaser-work/Documents/projects/social-network/client/src/components/PostForm.js":"13","/home/yaser-work/Documents/projects/social-network/client/src/utils/GraphqlQueries.js":"14","/home/yaser-work/Documents/projects/social-network/client/src/components/LikeButton.js":"15","/home/yaser-work/Documents/projects/social-network/client/src/pages/SinglePost.js":"16","/home/yaser-work/Documents/projects/social-network/client/src/components/DeleteButton.js":"17"},{"size":362,"mtime":1607367304389,"results":"18","hashOfConfig":"19"},{"size":887,"mtime":1608879840564,"results":"20","hashOfConfig":"21"},{"size":669,"mtime":1609175401819,"results":"22","hashOfConfig":"21"},{"size":353,"mtime":1607516637212,"results":"23","hashOfConfig":"21"},{"size":1248,"mtime":1609074649536,"results":"24","hashOfConfig":"21"},{"size":2120,"mtime":1608877598053,"results":"25","hashOfConfig":"21"},{"size":2886,"mtime":1608556988627,"results":"26","hashOfConfig":"21"},{"size":3731,"mtime":1608556993503,"results":"27","hashOfConfig":"21"},{"size":1703,"mtime":1608928716420,"results":"28","hashOfConfig":"21"},{"size":399,"mtime":1608121618199,"results":"29","hashOfConfig":"21"},{"size":1527,"mtime":1608332054707,"results":"30","hashOfConfig":"21"},{"size":443,"mtime":1608332887626,"results":"31","hashOfConfig":"21"},{"size":1576,"mtime":1609333140250,"results":"32","hashOfConfig":"21"},{"size":2783,"mtime":1609332189843,"results":"33","hashOfConfig":"21"},{"size":1514,"mtime":1609154255154,"results":"34","hashOfConfig":"21"},{"size":4989,"mtime":1609334133153,"results":"35","hashOfConfig":"21"},{"size":2544,"mtime":1609179381103,"results":"36","hashOfConfig":"21"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1iu2djg",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"evo0l9",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"47"},"/home/yaser-work/Documents/projects/social-network/client/src/reportWebVitals.js",[],["80","81"],"/home/yaser-work/Documents/projects/social-network/client/src/App.js",[],["82","83"],"/home/yaser-work/Documents/projects/social-network/client/src/ApolloProvider.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/index.js",[],["84","85"],"/home/yaser-work/Documents/projects/social-network/client/src/pages/Home.js",[],["86","87"],"/home/yaser-work/Documents/projects/social-network/client/src/components/Navbar.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/pages/Login.js",["88"],"import React, {useContext,useState} from 'react'\nimport {useMutation} from '@apollo/react-hooks'\nimport {AuthContext} from '../context/auth'\n\nimport {Grid,Form, Button} from 'semantic-ui-react'\n\nimport {useForm} from '../utils/hooks'\nimport {LOGIN_USER} from '../utils/GraphqlQueries'\n\nfunction Login(props) {\n\n    const context = useContext(AuthContext)\n\n    // TODO: setup errors\n    const [errors, setErrors] = useState({})\n\n    const {values, onChange,onSubmit} = useForm(loginUserCallback, {\n        username: '',\n        password: '',\n    })\n\n\n    const [loginUser, {loading}] = useMutation(LOGIN_USER, {\n        update(_,{data:{login: userData} = {}}) {\n            context.login(userData)\n            props.history.push('/')\n            console.log(userData)\n        },\n        onError(err) {\n            // setErrors(err.graphQLErrors[0].extensions.exception.errors)\n            console.log(err)\n        },\n        variables: values\n    })\n\n    // a function to make loginUser() function recognized in useForm()\n    // passing loginUser function directly to useForm will not work because loginUser not declared before\n    function loginUserCallback(){\n        loginUser()\n    }\n\n    return (\n        <Grid centered columns={2}>\n            <Grid.Row>\n                <h2 className=\"ui center aligned container\">User Login</h2>\n            </Grid.Row>\n            <Grid.Column>\n                <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                    <Form.Input\n                        label=\"Username\"\n                        placeholder=\"Username\"\n                        name=\"username\"\n                        type=\"text\"\n                        value= {values.username}\n                        onChange={onChange}\n                        // error= {errors.username ? true : false}\n                    />\n                    <Form.Input\n                        label=\"Password\"\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        type=\"password\"\n                        value= {values.password}\n                        onChange={onChange}\n                        // error= {errors.password ? true : false}\n                    />\n                    <Button\n                        type=\"submit\"\n                        content=\"Login\"\n                    />\n                </Form>\n\n                {Object.keys(errors).length > 0 && (\n                    <div className=\"ui message error\">\n                        <ul className=\"list\">\n                            {Object.values(errors).map(error => (\n                                <li key={error}>{error}</li>\n                            )\n                            )}\n                        </ul>\n                    </div>\n                )}\n            </Grid.Column>\n        </Grid>\n    )\n}\n\n\nexport default Login;\n",["89","90"],"/home/yaser-work/Documents/projects/social-network/client/src/pages/Register.js",["91"],"import React, {useContext,useState} from 'react'\nimport {useMutation} from '@apollo/react-hooks'\nimport {AuthContext} from '../context/auth'\n\nimport {Grid,Form, Button} from 'semantic-ui-react'\n\nimport {useForm} from '../utils/hooks'\nimport {REGISTER_USER} from '../utils/GraphqlQueries'\n\nfunction Register(props) {\n\n    const context = useContext(AuthContext)\n\n    // TODO: setup errors\n    const [errors, setErrors] = useState({})\n\n    const {values, onChange,onSubmit} = useForm(addUserCallback, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n    })\n\n\n    const [addUser, {loading}] = useMutation(REGISTER_USER, {\n        update(_,{data: {register: userData}} = {}) {\n            context.login(userData)\n            props.history.push('/')\n            console.log(userData)\n        },\n        onError(err) {\n            // setErrors(err.graphQLErrors[0].extensions.exception.errors)\n            console.log(err)\n        },\n        variables: values\n    })\n\n    // a function to make addUser() function recognized in useForm()\n    // passing addUser function directly to useForm will not work because addUser not declared before\n    function addUserCallback(){\n        addUser()\n    }\n\n    return (\n        <Grid centered columns={2}>\n            <Grid.Row>\n                <h2 className=\"ui center aligned container\">Register a new user</h2>\n            </Grid.Row>\n            <Grid.Column>\n                <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\n                    <Form.Input\n                        label=\"Username\"\n                        placeholder=\"Username\"\n                        name=\"username\"\n                        type=\"text\"\n                        value= {values.username}\n                        onChange={onChange}\n                        // error= {errors.username ? true : false}\n                    />\n                    <Form.Input\n                        label=\"Email\"\n                        placeholder=\"Email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value= {values.email}\n                        onChange={onChange}\n                        // error= {errors.email ? true : false}\n                    />\n                    <Form.Input\n                        label=\"Password\"\n                        placeholder=\"Password\"\n                        name=\"password\"\n                        type=\"password\"\n                        value= {values.password}\n                        onChange={onChange}\n                        // error= {errors.password ? true : false}\n                    />\n                    <Form.Input\n                        label=\"Confirm Password\"\n                        placeholder=\"Confirm Password\"\n                        name=\"confirmPassword\"\n                        type=\"password\"\n                        value= {values.confirmPassword}\n                        onChange={onChange}\n                        // error= {errors.confirmPassword ? true : false}\n                    />\n                    <Button\n                        type=\"submit\"\n                        content=\"Register\"\n                    />\n                </Form>\n\n                {Object.keys(errors).length > 0 && (\n                    <div className=\"ui message error\">\n                        <ul className=\"list\">\n                            {Object.values(errors).map(error => (\n                                <li key={error}>{error}</li>\n                            )\n                            )}\n                        </ul>\n                    </div>\n                )}\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default Register;\n","/home/yaser-work/Documents/projects/social-network/client/src/components/PostCard.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/utils/hooks.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/context/auth.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/utils/AuthRoute.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/components/PostForm.js",["92"],"import React from 'react'\nimport {useMutation} from '@apollo/react-hooks'\nimport {Form, Grid, Button} from 'semantic-ui-react'\n\nimport {useForm} from '../utils/hooks'\nimport {FETCH_POSTS, CREATE_POST} from '../utils/GraphqlQueries'\n\nfunction PostForm() {\n\n    const {values, onSubmit, onChange} = useForm(postFormCallback, {\n        body: ''\n    })\n\n    const [createPost, {error}] = useMutation(CREATE_POST, {\n        variables: values,\n        update(proxy, result){\n\n            // use apollo caching\n            const data = proxy.readQuery({\n                query: FETCH_POSTS,\n            });\n            proxy.writeQuery({\n                query: FETCH_POSTS,\n                data: {\n                    getPosts: [result.data.createPost, ...data.getPosts],\n                },\n            });\n            values.body = \"\";\n        }\n    })\n\n    function postFormCallback() {\n        createPost()\n    }\n\n    return (\n        <Grid.Column>\n            <Form>\n                <h1>Create a post</h1>\n                <Form.Field>\n                    <Form.Input\n                        placeholder= \"Type here ..\"\n                        name= \"body\"\n                        type=\"text\"\n                        onChange={onChange}\n                        value={values.body}\n                    />\n                    <Button\n                        content=\"Post\"\n                        type=\"submit\"\n                        onClick={onSubmit}\n                    />\n                </Form.Field>\n            </Form>\n        </Grid.Column>\n    )\n}\n\nexport default PostForm\n","/home/yaser-work/Documents/projects/social-network/client/src/utils/GraphqlQueries.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/components/LikeButton.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/pages/SinglePost.js",[],"/home/yaser-work/Documents/projects/social-network/client/src/components/DeleteButton.js",["93"],"import React, {useState} from 'react'\nimport {useMutation} from '@apollo/react-hooks'\nimport {Button, Confirm} from 'semantic-ui-react'\n\nimport {DELETE_POST, DELETE_COMMENT, FETCH_POST,FETCH_POSTS} from '../utils/GraphqlQueries'\n\nfunction DeleteButton({postId, deletePostCB, commentId}) {\n\n    const [confirm, setConfirm] = useState(false)\n\n    const mutation = commentId ? DELETE_COMMENT : DELETE_POST\n\n    const [deletePostOrComment] = useMutation(mutation, {\n        variables: {\n            postId,\n            commentId\n        },\n        update(proxy, result){\n            //close confirm window\n            setConfirm(false)\n\n            if(!commentId) {\n                // remove post from apollo cache\n                const data = proxy.readQuery({\n                    query: FETCH_POSTS\n                })\n                let newData = [...data.getPosts]\n                newData = data.getPosts.filter(post => post.id !== postId)\n                // console.log(newData)\n\n                proxy.writeQuery({\n                    query: FETCH_POSTS,\n                    data: {\n                        ...data,\n                        getPosts: newData\n                    }\n                })\n            } else {\n\n                // TODO: REMOVE DELETED COMMENT FROM APOLLO CACHE\n\n                // // remove comment from apollo cache\n                // const data = proxy.readQuery({\n                //     query: FETCH_POST\n                // })\n                // let newData = [...data.getPost]\n                // newData = data.getPost.comments.filter(comment => comment.id !== commentId)\n                // // console.log(newData)\n\n                // proxy.writeQuery({\n                //     query: FETCH_POST,\n                //     data: {\n                //         ...data,\n                //         getPost: newData\n                //     }\n                // })\n            }\n\n            // callback redirect to homepage\n            deletePostCB && deletePostCB()\n        }\n    })\n\n    return (\n        <>\n            <Button\n                color=\"red\"\n                icon=\"close\"\n                floated=\"right\"\n                size='mini'\n                onClick={() => setConfirm(true)}\n            />\n            <Confirm\n                open={confirm}\n                content=\"You sure you want to delete it? After delete you cannot recover it again.\"\n                onCancel={() => setConfirm(false)}\n                onConfirm={deletePostOrComment}\n            />\n        </>\n    )\n}\nexport default DeleteButton",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"98"},{"ruleId":"96","replacedBy":"99"},{"ruleId":"94","replacedBy":"100"},{"ruleId":"96","replacedBy":"101"},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":15,"column":20,"nodeType":"106","messageId":"107","endLine":15,"endColumn":29},{"ruleId":"94","replacedBy":"108"},{"ruleId":"96","replacedBy":"109"},{"ruleId":"104","severity":1,"message":"105","line":15,"column":20,"nodeType":"106","messageId":"107","endLine":15,"endColumn":29},{"ruleId":"104","severity":1,"message":"110","line":14,"column":25,"nodeType":"106","messageId":"107","endLine":14,"endColumn":30},{"ruleId":"104","severity":1,"message":"111","line":5,"column":38,"nodeType":"106","messageId":"107","endLine":5,"endColumn":48},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],["112"],["113"],["112"],["113"],["112"],["113"],"no-unused-vars","'setErrors' is assigned a value but never used.","Identifier","unusedVar",["112"],["113"],"'error' is assigned a value but never used.","'FETCH_POST' is defined but never used.","no-global-assign","no-unsafe-negation"]